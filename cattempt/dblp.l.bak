%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "dblp.tab.h"

int linect = 1;     // keep track of line number

%}

%s AUTHORS
/* used to parse out each individual author from the comma-delimited list */

%s REF
/* used to parse out each individual reference */

%s GOT_REF
/* used if reference is found, in order to distinguish empty references */

%s ABST

%s GOT_ABST

title       #\*.*?$
authors     "#@"
author      [^,\n]*
year        "#t".*?$
venue       "#c".*?$
id          "#index"(.*?)$
refstart    "#%"
ref         [0-9]*
abststart   "#!"
abstract    [^\n\r]*
ws          [ \t]+$
break       ^[ \t\r]*\n


%%

{title}             {yylval.str = strdup(yytext+2); return TITLE_T;}

{authors}           {BEGIN AUTHORS; }
<AUTHORS>{author}   {yylval.str = strdup(yytext); return AUTHOR_T;}
<AUTHORS>,          {return ','; }
<AUTHORS>\n         {linect++; BEGIN INITIAL; }

{year}              {yylval.str = strdup(yytext+2); return YEAR_T;}
{venue}             {yylval.str = strdup(yytext+2); return VENUE_T;}
{id}                {yylval.str = strdup(yytext+6); return ID_T;}

{refstart}          {BEGIN REF; }
<REF>{ref}          {if (strlen(yytext) > 0) {
                         printf("REF: %s\n", yytext);
                         yylval.str = strdup(yytext);
                         return REF_T;
                     }
                     BEGIN GOT_REF;
                    }
<GOT_REF>\n         {linect++; BEGIN INITIAL; return '\n'; }
<REF>\n             {linect++; BEGIN INITIAL; return EMPTY_REF; }

{abststart}         {BEGIN ABST; }
<ABST>{ws}          {linect++; BEGIN INITIAL; return EMPTY_ABSTRACT; }
<ABST>{abstract}    {if (strlen(yytext+2) > 0) {
                         printf("ABSTRACT: %s\n", yytext+2);
                         yylval.str = strdup(yytext+2);
                         return ABSTRACT_T;
                     }
                     BEGIN INITIAL;
                    }

{break}             {linect++; return BREAK_T;}
\n      	    	{linect++; }
.		            ;

%%
